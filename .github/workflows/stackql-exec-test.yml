name: 'stackql query tests'

on:
  push:
    branches:
    - main
  pull_request:
jobs:
  stackql-exec-google-example:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{matrix.os}}
    name: 'StackQL exec Google '

    steps: 
    - name: Checkout
      uses: actions/checkout@v4.1.3

    #
    # run a query that does not return data (using the `is_command` input)
    #
    - name: pull providers
      id: stackql-command
      uses: ./
      with:
        is_command: true
        query: "REGISTRY PULL github;
                REGISTRY PULL google;"

    #
    # run a query using the `query` input
    #
    - name: github query example using the query input
      id: stackql-query
      uses: ./
      with:
        query: |
          select visibility, count(*) as number_of_repos
          from github.repos.repos
          where org = 'stackql'
          group by visibility
      env: 
        STACKQL_GITHUB_USERNAME: ${{  secrets.STACKQL_GITHUB_USERNAME }}
        STACKQL_GITHUB_PASSWORD: ${{  secrets.STACKQL_GITHUB_PASSWORD }}

    # `csv` output
    - name: github query example using the query input (csv output)
      id: stackql-query-csv-output
      uses: ./
      with:
        query_output: csv
        query: |
          select visibility, count(*) as number_of_repos
          from github.repos.repos
          where org = 'stackql'
          group by visibility
      env: 
        STACKQL_GITHUB_USERNAME: ${{  secrets.STACKQL_GITHUB_USERNAME }}
        STACKQL_GITHUB_PASSWORD: ${{  secrets.STACKQL_GITHUB_PASSWORD }}

    # `table` output
    - name: github query example using the query input (table output)
      id: stackql-query-table-output
      uses: ./
      with:
        query_output: table
        query: |
          select visibility, count(*) as number_of_repos
          from github.repos.repos
          where org = 'stackql'
          group by visibility
      env: 
        STACKQL_GITHUB_USERNAME: ${{  secrets.STACKQL_GITHUB_USERNAME }}
        STACKQL_GITHUB_PASSWORD: ${{  secrets.STACKQL_GITHUB_PASSWORD }}

    # `text` output
    - name: github query example using the query input (text output)
      id: stackql-query-text-output
      uses: ./
      with:
        query_output: text
        query: |
          select visibility, count(*) as number_of_repos
          from github.repos.repos
          where org = 'stackql'
          group by visibility
      env: 
        STACKQL_GITHUB_USERNAME: ${{  secrets.STACKQL_GITHUB_USERNAME }}
        STACKQL_GITHUB_PASSWORD: ${{  secrets.STACKQL_GITHUB_PASSWORD }}

    #
    # run a query using the `query_file_path` input
    #
    - name: google query example with query file
      id: stackql-query-file
      uses: ./
      with:
        query_file_path: './stackql_scripts/google-instances-by-status.iql'
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    #
    # run a query using the `query_file_path` and `vars` inputs
    #
    - name: google query example with query file using vars
      id: stackql-query-file-with-vars
      uses: ./
      with:
        query_file_path: './stackql_scripts/google-instances-by-status-with-inline-jsonnet-block.iql'
        vars: GOOGLE_PROJECT=${{ env.GOOGLE_PROJECT }},GOOGLE_ZONE=${{ env.GOOGLE_ZONE }}
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GOOGLE_PROJECT: ${{ vars.GOOGLE_PROJECT }}
        GOOGLE_ZONE: ${{ vars.GOOGLE_ZONE }}

    #
    # run a query using the `query_file_path`, `data_file_path` and `vars` inputs
    #
    - name: google query example with query file and data file using vars
      id: stackql-query-file-with-data-file-and-vars
      uses: ./
      with:
        query_file_path: './stackql_scripts/google-instances-by-status-with-external-data-file.iql'
        data_file_path: './stackql_scripts/google-instances-by-status-with-external-data-file.jsonnet'
        vars: GOOGLE_PROJECT=${{ env.GOOGLE_PROJECT }},GOOGLE_ZONE=${{ env.GOOGLE_ZONE }}
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        GOOGLE_PROJECT: ${{ vars.GOOGLE_PROJECT }}
        GOOGLE_ZONE: ${{ vars.GOOGLE_ZONE }}        

    - name: validate stackql outputs
      shell: bash
      run: |
        # Check stackql-command output
        if echo "${{ steps.stackql-command.outputs.stackql-command-output }}" | grep -qE "provider, version 'v[0-9.]+' successfully installed"; then
          echo "stackql-command output is valid."
        else
          echo "stackql-command output is invalid."
          exit 1
        fi

        # Check JSON output from stackql-query
        if ! echo "${{ steps.stackql-query.outputs.stackql-query-results }}" | jq empty; then
          echo "JSON output from stackql-query is invalid."
          exit 1
        fi

        # Check CSV output from stackql-query-csv-output
        csv_header="${{ steps.stackql-query-csv-output.outputs.stackql-query-results }}"
        if ! echo "$csv_header" | head -n 1 | grep -q "visibility,number_of_repos"; then
          echo "CSV header from stackql-query-csv-output is invalid."
          exit 1
        fi

        # Check Table output from stackql-query-table-output
        table_header="${{ steps.stackql-query-table-output.outputs.stackql-query-results }}"
        if ! echo "$table_header" | sed -n 2p | grep -q "| visibility | number_of_repos |"; then
          echo "Table header from stackql-query-table-output is invalid."
          exit 1
        fi

        # Check Text output from stackql-query-text-output
        text_output="${{ steps.stackql-query-text-output.outputs.stackql-query-results }}"
        if ! echo "$text_output" | head -n 1 | grep -q "visibility,number_of_repos"; then
          echo "Text output from stackql-query-text-output is invalid."
          exit 1
        fi

        # Check outputs from files and variable dependent queries
        if ! echo "${{ steps.stackql-query-file.outputs.stackql-query-results }}" | jq empty; then
          echo "JSON output from stackql-query-file is invalid."
          exit 1
        fi

        if ! echo "${{ steps.stackql-query-file-with-vars.outputs.stackql-query-results }}" | jq empty; then
          echo "JSON output from stackql-query-file-with-vars is invalid."
          exit 1
        fi

        if ! echo "${{ steps.stackql-query-file-with-data-file-and-vars.outputs.stackql-query-results }}" | jq empty; then
          echo "JSON output from stackql-query-file-with-data-file-and-vars is invalid."
          exit 1
        fi
